import streamlit as st
import pandas as pd
import joblib
import numpy as np
from datetime import datetime, timedelta
from catboost import CatBoostRegressor

# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —É—á—ë—Ç–æ–º –¥–∞—Ç—ã –∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–µ–Ω—ã
def adjust_price(base_pred, input_price, tolerance=0.2, user_weight=0.9):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
    if abs(input_price - base_pred) / input_price > tolerance:
        return (1 - user_weight) * base_pred + user_weight * input_price
    return base_pred

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
data_oned = pd.read_csv('intensive3/data/price_data.csv', parse_dates=['dt'])
data_oned = data_oned.sort_values('dt').reset_index(drop=True)

model = joblib.load('intensive3/models/model_oned.pkl')

st.title("–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∏ —É—Ä–æ–≤–µ–Ω—å –∑–∞–∫—É–ø–∫–∏ –∞—Ä–º–∞—Ç—É—Ä—ã")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
input_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", datetime.today())
current_price = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É", min_value=0.0, format="%.2f", value=1000.0)

if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–∞–≥–æ–≤
        if len(data_oned) >= 6:
            hist_data = data_oned[data_oned['dt'] <= pd.to_datetime(input_date)]
            if len(hist_data) >= 6:
                history = list(hist_data['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'].tail(6))
            else:
                history = [current_price] * 6
        else:
            history = [current_price] * 6

        dates = [pd.to_datetime(input_date)]
        prices = [current_price]
        max_multiplier = 1
        current_multiplier = 1
        stop_multiplier = False  # –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—á—ë—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è

        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å
        for i in range(6):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ª–∞–≥–∞–º–∏
            X_pred = pd.DataFrame({
                'lag_1': [history[-1]],
                'lag_2': [history[-2]],
                'lag_3': [history[-3]],
                'lag_4': [history[-4]],
                'lag_5': [history[-5]],
                'lag_6': [history[-6]]
            })

            # –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏
            base_pred = model.predict(X_pred)[0]
            pred = adjust_price(base_pred, current_price)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
            pred_date = dates[-1] + timedelta(weeks=1)

            # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è X
            if not stop_multiplier:
                if pred > prices[-1]:
                    current_multiplier += 1
                else:
                    stop_multiplier = True  # –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω–∞ –∏–¥—ë—Ç –≤–≤–µ—Ä—Ö ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º X

            max_multiplier = max(max_multiplier, current_multiplier)

            dates.append(pred_date)
            prices.append(pred)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history.pop(0)
            history.append(pred)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        df_result = pd.DataFrame({
            "–î–∞—Ç–∞": [d.strftime("%Y-%m-%d") for d in dates],
            "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": [round(p, 2) for p in prices]
        })

        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å")
        st.table(df_result)
        st.line_chart(df_result.set_index('–î–∞—Ç–∞')['–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã'])

        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è X
        st.subheader("–ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–∫—É–ø–∫–∏")
        st.write(f"üîπ –£—Ä–æ–≤–µ–Ω—å –∑–∞–∫—É–ø–∫–∏: **{max_multiplier}X**")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
